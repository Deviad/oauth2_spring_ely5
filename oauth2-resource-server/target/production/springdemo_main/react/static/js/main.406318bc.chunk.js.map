{"version":3,"sources":["utils/index.js","utils/utils.js","Oauth2/OAuth2.js","Oauth2/index.js","App.js","serviceWorker.js","index.js"],"names":["oauth2Ely5Utils","cookieStorage","options","secure","setItem","key","value","window","Cookies","set","getItem","get","removeItem","remove","index","allKeys","Object","keys","getJSON","length","storageAvailable","type","storage","x","e","DOMException","code","name","urlencode","obj","str","p","push","encodeURIComponent","join","getParameterByName","url","location","href","replace","results","RegExp","exec","decodeURIComponent","storageFactory","getStorage","sessionStorage","localStorage","Authorization","urlencodedParams","response_type","client_id","scope","redirect_uri","concat","useEffect","react_default","a","createElement","handleLocalAuth","fetch","method","headers","Content-type","body","JSON","stringify","grant_type","client_secret","then","res","status","json","data","console","log","catch","error","Token","oauth2Routes","/authorization","OAuth2_Authorization","/token","OAuth2_Token","Oauth2","routeResult","useRoutes","routes","/","App_HomePage","/oauth*","/fakeuser","App_FakeUser","NotFoundPage","FakeUser","HomePage","App","props","match","className","style","marginTop","getWorkingPath","App_NotFoundPage","Boolean","hostname","setBasepath","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.406318bc.chunk.js","sourcesContent":["import oauth2Ely5Utils from './utils';\n\nexport default oauth2Ely5Utils;\n","import 'js-cookie';\n\nconst oauth2Ely5Utils = (function() {\n\n\tfunction urlencode(obj) {\n\t\tvar str = [];\n\t\tfor (var p in obj)\n\t\t\tstr.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n\t\treturn str.join(\"&\");\n\t}\n\n\tfunction getParameterByName(name, url) {\n\t\tif (!url) url = window.location.href;\n\t\tname = name.replace(/[\\[\\]]/g, '\\\\$&');\n\t\tvar regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n\t\t\tresults = regex.exec(url);\n\t\tif (!results) return null;\n\t\tif (!results[2]) return '';\n\t\treturn decodeURIComponent(results[2].replace(/\\+/g, ' '));\n\t}\n\n\n\tvar cookieStorage = (function cookieStorage() {\n\n\t\tconst options = {\n\t\t\tsecure: true\n\t\t};\n\n\t\tvar setItem = (key, value) => window.Cookies.set(key, value, options);\n\n\t\tvar getItem = key => window.Cookies.get(key, options);\n\n\t\tvar removeItem = key => window.Cookies.remove(key, options);\n\n\t\tvar key = index => {\n\t\t\tlet allKeys = Object.keys(window.Cookies.getJSON());\n\t\t\treturn index > -1 && index <= allKeys.length\n\t\t\t\t? allKeys[index]\n\t\t\t\t: \"\";\n\t\t};\n\n\t\treturn {\n\t\t\tsetItem,\n\t\t\tgetItem,\n\t\t\tremoveItem,\n\t\t\tkey\n\t\t}\n\t})();\n\n\tconst storageAvailable = type => {\n\t\ttry {\n\t\t\tvar storage = window[type],\n\t\t\t\tx = \"__storage_test__\";\n\t\t\tstorage.setItem(x, x);\n\t\t\tstorage.removeItem(x);\n\t\t\treturn true;\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn e instanceof DOMException && (\n\t\t\t\t\t// everything except Firefox\n\t\t\t\te.code === 22 ||\n\t\t\t\t// Firefox\n\t\t\t\te.code === 1014 ||\n\t\t\t\t// test name field too, because code might not be present\n\t\t\t\t// everything except Firefox\n\t\t\t\te.name === \"QuotaExceededError\" ||\n\t\t\t\t// Firefox\n\t\t\t\te.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n\t\t\t\t// acknowledge QuotaExceededError only if there's something already stored\n\t\t\t\tstorage.length !== 0;\n\t\t}\n\t};\n\n\tvar storageFactory = (function storageFactory() {\n\t\tconst getStorage = () => storageAvailable(\"sessionStorage\")\n\t\t\t? sessionStorage\n\t\t\t: storageAvailable(\"localStorage\")\n\t\t\t\t? localStorage\n\t\t\t\t: cookieStorage;\n\t\treturn {\n\t\t\tgetStorage\n\t\t}\n\t})();\n\n\treturn {\n\t\turlencode,\n\t\tgetParameterByName,\n\t\tcookieStorage,\n\t\tstorageFactory\n\t}\n\n})();\n\nexport default oauth2Ely5Utils;\n","import React, {useEffect} from 'react';\n\nimport {useRoutes} from \"hookrouter\";\n\nimport oauth2Ely5Utils from '../utils';\n\n\nconst Authorization = () => {\n\tconst urlencodedParams = oauth2Ely5Utils.urlencode({\n\t\t\"response_type\": \"code\",\n\t\t\"client_id\": \"fooClientIdPassword\",\n\t\t\"scope\": \"read\",\n\t\t\"redirect_uri\": \"http://localhost:3000/oauth/token\",\n\t\t// \"state\": oauth2Ely5Utils.cookieStorage.getItem(\"XSRF-TOKEN\")\n\t});\n\n\tconst url = `http://localhost:5050/oauth/authorize/?${urlencodedParams}`;\n\n\tuseEffect(() => {\n\t\twindow.location.href = url;\n\t}, []);\n\treturn (<div>Authorization</div>);\n};\n\n\nconst handleLocalAuth = () => {\n\tconst authorizeUrl = \"http://localhost:5050/oauth/token\";\n\tfetch(authorizeUrl, {\n\t\t// credentials: \"include\",\n\t\tmethod: \"post\",\n\t\theaders: {\n\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\n\t\t\t// \"Authorization\": `Basic '${+btoa(\"fooClientIdPassword:secret\")}'`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\t\"grant_type\": \"authorization_code\",\n\t\t\t\"client_id\": \"fooClientIdPassword\",\n\t\t\t\"client_secret\": \"secret\",\n\t\t\t\"code\": oauth2Ely5Utils.getParameterByName(\"code\"),\n\t\t\t\"redirect_uri\": \"http://localhost:3000/oauth/token\"\n\t\t})\n\t})\n\t.then(res => ((res.status / 100) | 0) === 2 && res)\n\t.then(res => res.json())\n\t.then(function (data) {\n\t\tconsole.log('Request succeeded with JSON response', data);\n\t\tsessionStorage.setItem(\"jwtToken\", JSON.stringify(data));\n\t\twindow.location.href = \"http://localhost:3000/fakeuser\"\n\t})\n\t.catch(function (error) {\n\t\tconsole.log('Request failed', error);\n\t});\n};\n\nconst Token = () => {\n\n\n\tuseEffect(handleLocalAuth, []);\n\n\treturn (<div>Token</div>);\n\n};\n\nconst oauth2Routes = {\n\t'/authorization': () => <Authorization/>,\n\t'/token': () => <Token/>\n};\n\nconst OAuth2 = () => {\n\tconst routeResult = useRoutes(oauth2Routes);\n\n\treturn (\n\t\t<div>\n\t\t\t{routeResult}\n\t\t</div>\n\t);\n};\n\nexport default OAuth2;\n","import Oauth2 from './OAuth2';\n\nexport default Oauth2;\n","import React from 'react';\nimport './App.css';\nimport {getWorkingPath, setBasepath, useControlledInterceptor, useRoutes} from \"hookrouter\";\nimport OAuth2 from \"./Oauth2\";\n\nconst routes = {\n\t'/': () => <HomePage/>,\n\t'/oauth*': () => <OAuth2/>,\n\t'/fakeuser': () => <FakeUser />\n};\n\n\nconst NotFoundPage = () => <div>Page not Found</div>;\n\n\nconst FakeUser = () => <div>Fake User Component</div>\n\n\nconst HomePage = () => {\n\treturn <div>This is a showcase of OAuth2 integration in React</div>\n\n};\n\n\n\n\nconst App = (props) => {\n\n\tconst match = useRoutes(routes);\n\n\treturn (\n\t\t<div className=\"App\" style={{marginTop:'100px'}}>\n\t\t\t{console.log('getWorkingPath', getWorkingPath())}\n\t\t\t{match || <NotFoundPage/>}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {setBasepath} from \"hookrouter\";\n\nsetBasepath('/react');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}