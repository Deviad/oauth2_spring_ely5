buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
        hibernateVersion = '5.4.2.Final'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.hibernate:hibernate-gradle-plugin:${hibernateVersion}")
    }
}


plugins {
    id 'java'
    id 'eclipse'
    id 'com.gradle.build-scan' version '2.0.2'
    id 'org.springframework.boot' version "2.0.5.RELEASE"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'net.ltgt.apt' version '0.9'
    id 'com.google.cloud.tools.jib' version '1.1.2'
    id "io.freefair.lombok" version "3.2.1"
}
jib.to.image='localhost:5000/simplicity-springdemo'
ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.4"
}
jib.allowInsecureRegistries='true'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


// unlike testCompile, these configurations do not inherit from their compile counterparts
// so if your tests depend on lombok, make sure you have specified these:


repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url 'https://plugins.gradle.org/m2/' }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.0.BUILD-SNAPSHOT')
    //This dep treats nested classes as if they were nested properties
    compile('org.springframework.boot:spring-boot-configuration-processor')
//    compile('org.springframework.boot:spring-boot-starter-oauth2-oidc-client:2.1.0.BUILD-SNAPSHOT')
    compile('io.springfox:springfox-swagger2:2.9.2-SNAPSHOT')
    compile('io.springfox:springfox-swagger-ui:2.9.2-SNAPSHOT')
    compile('io.rest-assured:rest-assured:3.0.0')
//    compile('org.springframework.security.oauth:spring-security-oauth2:2.3.3.RELEASE')
    compile('org.springframework.security:spring-security-jwt:1.0.9.RELEASE')
//    compile('org.projectlombok:lombok')
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    implementation("org.projectlombok:lombok:$lombokVersion")
    compile("org.mapstruct:mapstruct:${mapstructVersion}")
    apt("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.apache.commons:commons-lang3:3.8.1')
    compile('javax.xml.bind:jaxb-api:2.3.0')
    compile('javax.activation:activation:1.1')
    compile('org.glassfish.jaxb:jaxb-runtime:2.3.0')
    compile('javax.annotation:javax.annotation-api:1.3.2')
    runtime('mysql:mysql-connector-java')
    runtime('org.mariadb.jdbc:mariadb-java-client:2.4.1')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

}
bootRun {
    systemProperties System.properties
    //systemProperties System.properties as Map<String, ?> // Allows to pass command-line properties (using -D switch)
    args = ["--spring.profiles.active=" + "$System.env.ACTIVE_PROFILE"]
}

test {

    systemProperty "APP_HOSTNAME", System.getProperty("APP_HOSTNAME")
    systemProperty "DB_NAME", System.getProperty("DB_NAME")
    systemProperty "DB_HOSTNAME", System.getProperty("DB_HOSTNAME")
    systemProperty "JWT_SIGNING_KEY", System.getProperty("JWT_SIGNING_KEY")
    systemProperty "ACTIVE_PROFILE", System.getProperty("ACTIVE_PROFILE")
    systemProperty "SERVER_PORT", System.getProperty("SERVER_PORT")
    systemProperty "DB_USERNAME", System.getProperty("DB_USERNAME")
    systemProperty "CLIENT_ID", System.getProperty("CLIENT_ID")
    systemProperty "SERVER_PORT", System.getProperty("SERVER_PORT")
    systemProperty "DDL_AUTO", System.getProperty("DDL_AUTO")
    systemProperty "DB_PASSWORD", System.getProperty("DB_PASSWORD")
    systemProperty "DB_DBMS", System.getProperty("DB_DBMS")
    systemProperty "CLIENT_SECRET", System.getProperty("CLIENT_SECRET")
}

//hibernate {
//    enhance {
//        enableLazyInitialization= true
//        enableDirtyTracking = true
//        enableAssociationManagement = true
//    }
//}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
